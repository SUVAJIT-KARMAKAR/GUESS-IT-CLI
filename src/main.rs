// CREATING A GUESSING GAME USING RUST PROGRAMMING 
// SUVAJIT KARMAKAR 

// PROBLEM STATEMENT OF THE GAME ==>
// The user is asked to guess a number and the machine generates a random number , the number which is guessed by the player is matched with that the number generated by the machine. If the number matches the player wins the game.

// IMPORTING THE REQUIRED LIBRARIES / MODULES IN THE WORK SPACE 
use std::io; // standard input/output library.
use rand::Rng; // Range trait.
use std::cmp::Ordering; // Ordering is a Enum which is used to compare two items.
use colored::*; // Using the colored library into the work space.

fn main() {

    println!("WELCOME TO THE GUESSING GAME!");

    //LOOPING THE GAME UNTIL AND UNLESS THE PLAYER GUESSES THE RIGHT NUMBER.
    loop {
        println!("PLEASE GUESS A NUMBER BETWEEN 1 TO 20 ");

        // CREATING A STRING VARIABLE TO STORE THE VALUE OF THE INPUT GIVEN BY THE USER
        let mut guess = String::new();
        let computer_generated_random_number = rand::thread_rng().gen_range(1, 19); // The random number generator function uses the range thread to use a boundary of low to high values and store it into the variable called computer_generated_random_number.
        println!("THE COMPUTER GENERATED SECRET NUMBER WAS : {computer_generated_random_number}");
    
        // TAKING USER INPUT FROM THE STANDARD BUFFER 
        io::stdin()
            .read_line(&mut guess)
            .expect("FAILED TO READ - USER INPUT FROM TERMINAL !");
        let guess: u32 = match guess.trim().parse() {
            Ok(num) => num,
            Err(_) => {
                println!("PLEASE ENTER A VALID INTEGER VALUE");
                continue;
            }
        };
    
        // PRINTING OUT THE GUESSED VARIABLE AND THE SECRET NUMBER 
        println!("YOUR GUESSED NUMBER WAS : {guess}");
    
        // COMPARING THE VALUES OF THE INPUT WITH THAT OF THE COMPUTER GENERATED RANDOM NUMBER USING ordering 
        match guess.cmp(&computer_generated_random_number) {
                Ordering::Equal => {
                    println!("{}", "THE PLAYER WINS THE GAME".green());
                    break;
                },
                Ordering::Less => println!("{}", "TRY GUESSING A LARGER NUMBER!".red()),
                Ordering::Greater => println!("{}", "TRY GUESSING A SMALLER NUMBER!".red())
        }
    }
}

